<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>桃花依旧笑春风</title><link>https://OnHaiping.github.io/blogs</link><description>把酒祝东风，且共从容。</description><copyright>桃花依旧笑春风</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://onhaiping.github.io/blogs/icon/%E4%B8%89%E6%AF%9B.jpg</url><title>avatar</title><link>https://OnHaiping.github.io/blogs</link></image><lastBuildDate>Wed, 11 Sep 2024 01:48:41 +0000</lastBuildDate><managingEditor>桃花依旧笑春风</managingEditor><ttl>60</ttl><webMaster>桃花依旧笑春风</webMaster><item><title>机器学习初步流程</title><link>https://OnHaiping.github.io/blogs/post/ji-qi-xue-xi-chu-bu-liu-cheng.html</link><description># 开始学习&#13;
&#13;
## 评分指标&#13;
&#13;
### 分类指标&#13;
&#13;
常见的分类指标包含错误率、精度、准确度（precision，也称查准率）、召回率（recall，也称为查全率）、F1-score、ROC曲线、AUC和对数损失（logloss）&#13;
&#13;
### 错误率和精度&#13;
&#13;
错误率是分类结果错误的样本占样本总数的比例，精度则是分类结果正确的样本数占样本总数的比例。</description><guid isPermaLink="true">https://OnHaiping.github.io/blogs/post/ji-qi-xue-xi-chu-bu-liu-cheng.html</guid><pubDate>Tue, 10 Sep 2024 01:32:15 +0000</pubDate></item><item><title>微信小程序+MQTT连接</title><link>https://OnHaiping.github.io/blogs/post/wei-xin-xiao-cheng-xu-%2BMQTT-lian-jie.html</link><description># 微信小程序+MQTT连接&#13;
&#13;
## 微信小程序&#13;
&#13;
### 1 注册微信小程序账号&#13;
&#13;
```python&#13;
# 1 访问微信公众平台，注册一个微信小程序账号&#13;
	-https://mp.weixin.qq.com/&#13;
        &#13;
# 2 重点：注册使用邮箱注册&#13;
	未被微信公众平台注册，未被微信开放平台注册，未被个人微信号绑定的邮箱&#13;
```&#13;
&#13;
### 2 创建微信小程序项目&#13;
&#13;
#### 2.1 创建项目流程（开发者）&#13;
&#13;
```python&#13;
# 1 获取 小程序id&#13;
	-小程序后台--》开发--》开发管理--》开发设置--》开发者ID&#13;
    -AppID(小程序ID)	     wx539e097341fc7588&#13;
    &#13;
    &#13;
# 2 下载微信开发者工具--》这个工具必须联网才能使用&#13;
	-下载地址：https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html&#13;
    -wechat_devtools_1.06.2402040_win32_x64.exe&#13;
    &#13;
# 3 一路下一步安装--》桌面有个快捷方式&#13;
	-微信开发者工具就等同于 pycharm&#13;
	&#13;
```&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
![image-20240401204708959](https://imgtroage-1317162111.cos.ap-nanjing.myqcloud.com/img/image-20240401204708959.png)&#13;
&#13;
![image-20240401204843951](https://imgtroage-1317162111.cos.ap-nanjing.myqcloud.com/img/image-20240401204843951.png)&#13;
&#13;
![image-20240401171756755](https://imgtroage-1317162111.cos.ap-nanjing.myqcloud.com/img/image-20240401171756755.png)&#13;
&#13;
![image-20240401171823876](https://imgtroage-1317162111.cos.ap-nanjing.myqcloud.com/img/image-20240401171823876.png)&#13;
&#13;
![image-20240401205141964](https://imgtroage-1317162111.cos.ap-nanjing.myqcloud.com/img/image-20240401205141964.png)&#13;
&#13;
#### 2.2 创建项目&#13;
&#13;
```python&#13;
# 1 双击 微信开发者工具&#13;
&#13;
# 2 微信扫码--》登录&#13;
&#13;
# 3 创建项目&#13;
	-填写名字&#13;
    -路径&#13;
    -APPID&#13;
    -不使用云开发【使用腾讯云的云函数，服务器等等，需要花钱】&#13;
    -不使用模版&#13;
    	-可以选择js基础版--》别的别选了&#13;
        	-TS：咱们不会&#13;
            -其他模版功能比较复杂对新手不友好&#13;
            &#13;
            &#13;
# 4 基础设置&#13;
	-设置--》编辑器设置--》改变字体大小&#13;
    -视图--》外观--》移动模拟器位置&#13;
    -可以勾选掉不显示：模拟器，调试器等&#13;
```&#13;
&#13;
![image-20240401172015541](https://imgtroage-1317162111.cos.ap-nanjing.myqcloud.com/img/image-20240401172015541.png)&#13;
&#13;
![image-20240401172035213](https://imgtroage-1317162111.cos.ap-nanjing.myqcloud.com/img/image-20240401172035213.png)&#13;
&#13;
![image-20240401172457001](https://imgtroage-1317162111.cos.ap-nanjing.myqcloud.com/img/image-20240401172457001.png)&#13;
&#13;
![image-20240401173007494](https://imgtroage-1317162111.cos.ap-nanjing.myqcloud.com/img/image-20240401173007494.png)&#13;
&#13;
![image-20240401173252969](https://imgtroage-1317162111.cos.ap-nanjing.myqcloud.com/img/image-20240401173252969.png)&#13;
&#13;
&#13;
&#13;
![image-20240401210031630](https://imgtroage-1317162111.cos.ap-nanjing.myqcloud.com/img/image-20240401210031630.png)&#13;
&#13;
#### 2.3 本地开发支持http&#13;
&#13;
```python&#13;
# -微信小程序默认不支持http、wss--》修改一下--》微信小程序配置&#13;
    	-让小程序支持 http wss 协议&#13;
```&#13;
&#13;
![image-20240401212012755](https://imgtroage-1317162111.cos.ap-nanjing.myqcloud.com/img/image-20240401212012755.png)&#13;
&#13;
### 3 项目目录结构&#13;
&#13;
#### 3.1 项目目录结构&#13;
&#13;
#### 3.1.1 目录介绍&#13;
&#13;
```python&#13;
# 1 项目主配置文件，在项目根路径下，控制整个项目的&#13;
	-app.js    # 小程序入口文件，小程序启动，会执行这个js&#13;
    -app.json  # 小程序的全局配置：顶部的颜色，标题。</description><guid isPermaLink="true">https://OnHaiping.github.io/blogs/post/wei-xin-xiao-cheng-xu-%2BMQTT-lian-jie.html</guid><pubDate>Sun, 08 Sep 2024 09:22:51 +0000</pubDate></item><item><title>Git使用方法</title><link>https://OnHaiping.github.io/blogs/post/Git-shi-yong-fang-fa.html</link><description># Git版本控制&#13;
&#13;
## 初始化&#13;
&#13;
初始化设置用户名和邮箱&#13;
&#13;
```git&#13;
git config --global user.name 'Your Name'&#13;
git config --global user.emal 'email@mail.com'&#13;
git config --global credential.helper store&#13;
```&#13;
&#13;
查看当前配置&#13;
&#13;
```git&#13;
git config --global --list&#13;
```&#13;
&#13;
### 创建仓库&#13;
&#13;
创建一个新的本地仓库（省略project-name则在当前目录创建）&#13;
&#13;
```&#13;
git init project-name&#13;
```&#13;
&#13;
下载一个远程苍鹭&#13;
&#13;
```&#13;
git clone &lt;url&gt;&#13;
```&#13;
&#13;
### Git的四个区域&#13;
&#13;
- **工作区（**Working Directory**）**&#13;
&#13;
  就是你在电脑里能实际看到的目录。</description><guid isPermaLink="true">https://OnHaiping.github.io/blogs/post/Git-shi-yong-fang-fa.html</guid><pubDate>Sun, 08 Sep 2024 09:07:15 +0000</pubDate></item><item><title>LightGBM学习</title><link>https://OnHaiping.github.io/blogs/post/LightGBM-xue-xi.html</link><description># LightGBM&#13;
&#13;
[[笔记来源于此篇文章](https://blog.csdn.net/qq_34160248/article/details/127171265)](https://blog.csdn.net/qq_34160248/article/details/127171265)&#13;
&#13;
&gt; [!note]&#13;
&gt;&#13;
&gt; LightGBM是一个基于树的学习算法的梯度增强框架，被设计成分布式的和高效的&#13;
&gt;&#13;
&gt; 优点：&#13;
&gt;&#13;
&gt; 1. 训练速度更快、效率更高&#13;
&gt; 2. 降低内存使用量&#13;
&gt; 3. 准确性更高&#13;
&gt; 4. 支持并行、分布式和GPU学习&#13;
&gt; 5. 能够处理大规模数据&#13;
&#13;
## 原理&#13;
&#13;
**lightGBM 主要基于以下方面优化，提升整体特特性：**&#13;
&#13;
1. 基于Histogram（直方图）的决策树算法&#13;
2. Lightgbm 的Histogram（直方图）做差加速&#13;
3. 带深度限制的Leaf-wise的叶子生长策略&#13;
4. 直接支持类别特征&#13;
5. 直接支持高效并行&#13;
&#13;
### 基于Histogram的决策树算法&#13;
&#13;
直方图算法的基本特征是：&#13;
&#13;
- 先将连续的浮点特征值离散化成 k 个整数，同时构造一个宽为 k 的直方图&#13;
- 在遍历数据的时候，根据离散化之后的值作为索引在直方图中累积统计量，当遍历一次数据之后，直方图累积了需要的统计量，然后根据直方图的离散值，遍历寻找最优的分割点&#13;
&#13;
&gt; [!note]&#13;
&gt;&#13;
&gt; 举个例子：&#13;
&gt;&#13;
&gt; [0 , 0.1) --&gt; 0;&#13;
&gt;&#13;
&gt; [0.1 , 0.3) --&gt; 1;&#13;
&#13;
![image-20191129114925562](https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/35d71fb09163c0e766d79562250dc46e.jpeg)&#13;
&#13;
使用直方图算法有很多优点。</description><guid isPermaLink="true">https://OnHaiping.github.io/blogs/post/LightGBM-xue-xi.html</guid><pubDate>Sun, 08 Sep 2024 09:04:21 +0000</pubDate></item><item><title>英语语法(Larry)</title><link>https://OnHaiping.github.io/blogs/post/ying-yu-yu-fa-%28Larry%29.html</link><description># 开始&#13;
&#13;
## 名词、形容词、副词就是一切&#13;
&#13;
![image-20240507170744255](https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240507170744255.png)&#13;
&#13;
&gt; [!important]&#13;
&gt;&#13;
&gt; 英语语法的核心在于&#13;
&gt;&#13;
&gt; - 形容词修饰名词&#13;
&gt; - 副词修饰形容词、动词、其他副词&#13;
&#13;
现在需要忘掉这一点：**把名词换成 &lt;u&gt;名词性成分&lt;/u&gt;**&#13;
&#13;
### 名词性成分&#13;
&#13;
 名词性成分包含什么：&#13;
&#13;
&gt; 1. 名词&#13;
&gt; 2. 名词性从句&#13;
&gt; 3. 不定式&#13;
&gt; 4. 动名词&#13;
&#13;
### 形容词性成分&#13;
&#13;
形容词也需要换成形容词性成分&#13;
&#13;
&gt; 1. 形容词&#13;
&gt; 2. 形容词性从句&#13;
&gt; 3. 不定式&#13;
&gt; 4. 分词&#13;
&gt; 5. 介词短语&#13;
&#13;
### 副词性成分&#13;
&#13;
副词换成 副词性成分&#13;
&#13;
&gt; 1. 副词&#13;
&gt; 2. 副词性从句&#13;
&gt; 3. 不定式&#13;
&gt; 4. 介词短语&#13;
&#13;
现在需要进行扩展：&#13;
&#13;
&gt; [!important]&#13;
&gt;&#13;
&gt; &lt;u&gt;形容词性成分&lt;/u&gt; 修饰 **名词性成分**&#13;
&gt;&#13;
&gt; &lt;u&gt;副词性成分&lt;/u&gt; 修饰 **形容词性成分**，其他的 **副词性成分** 以及 **动词** &#13;
&#13;
  ![image-20240507171842247](https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240507171842247.png)&#13;
&#13;
如果说能够在拿到一篇文章的时候，能够快速的划分出 这几个部分就OK了&#13;
&#13;
****&#13;
&#13;
语法的核心就是&#13;
&#13;
&gt; [!note]&#13;
&gt;&#13;
&gt; 名词性成分、形容词性成分、副词性成分以及它们三个之间的关系&#13;
&#13;
## 词性之间的修饰关系&#13;
&#13;
### 词性种类的划分&#13;
&#13;
&lt;img src='https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240507172945253.png' alt='image-20240507172945253' style='zoom:33%;' /&gt;&#13;
&#13;
&lt;img src='https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240507173005268.png' alt='image-20240507173005268' style='zoom:33%;' /&gt;&#13;
&#13;
&gt; [!important]&#13;
&gt;&#13;
&gt; 需要注意的地方是:&#13;
&gt;&#13;
&gt; 1.  代词 是 名词性成分&#13;
&gt;&#13;
&gt; 2.  介词 的话,有两种含义,一种是 **形容词性成分**, 一种是 **副词性成分**&#13;
&gt;&#13;
&gt;     介词 要么当成 **形容词** 来用,要么当成 **副词** 来用&#13;
&gt;&#13;
&gt; 3. 冠词 是当成 **形容词** &#13;
&gt;&#13;
&gt; 4. 数词 要么是当成 **名词性成分** 或者当成 **形容词性成分** 来用&#13;
&gt;&#13;
&gt;    1. ten people 这个 ten 做形容词&#13;
&gt;    2. it is a ten 这个 ten 就是做名词&#13;
&gt;&#13;
&gt; 5. 限定词 (some / any / my / your / ... )  这个的词性 就当成 **形容词** 就好 &#13;
&#13;
### 举例&#13;
&#13;
![image-20240507174017983](https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240507174017983.png)&#13;
&#13;
![image-20240507174210835](https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240507174210835.png)&#13;
&#13;
### 定语 \ 状语&#13;
&#13;
定语是什么:&#13;
&#13;
&gt; 定语就是 形容词性成分&#13;
&#13;
状语是什么:&#13;
&#13;
&gt; 状语就是 副词性成分&#13;
&#13;
![image-20240507174715376](https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240507174715376.png)&#13;
&#13;
## 介词 = 形容词 or 副词&#13;
&#13;
介词是不能单独拿出来说的，应该是 介词短语&#13;
&#13;
&gt; [!note]&#13;
&gt;&#13;
&gt; 介词 + 名词性成分 = 介词短语&#13;
&#13;
&lt;img src='https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240508172827608-1715160511766-1.png' alt='image-20240508172827608' style='zoom:33%;' /&gt;&#13;
&#13;
但需要注意的是，不是看到介词就是介词短语&#13;
&#13;
&lt;img src='https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240508173053269.png' alt='image-20240508173053269' style='zoom:33%;' /&gt;&#13;
&#13;
所以，需要注意的地方的是，一个词是由很多**词性**的  &#13;
&#13;
只有这个词和名词性成分搭配使用的时候，形成介词短语的时候，才能说是 **介词**&#13;
&#13;
介词是不能 **&lt;u&gt;单独使用的&lt;/u&gt;**&#13;
&#13;
&gt; She apologized for **arriving late to the meeting** &#13;
&gt;&#13;
&gt; 上面这个标粗的是动名词短语，当作的是**名词**来使用&#13;
&#13;
&gt; She's not certain（不清楚）about **whether she'll go to the party or not**.&#13;
&gt;&#13;
&gt; 上面后面的是 名词性从句&#13;
&#13;
&gt; The scientists are studying the effects of climate（气候） change on the ecosystem（生态系统）&#13;
&#13;
&gt; I'm worried about the fact that I haven't heard from him in a while&#13;
&gt;&#13;
&gt; （我很担心我已经有一段时间没有收到他的消息了）&#13;
&#13;
### 形容词的属性&#13;
&#13;
形容词属性的介词短语一般用作后置定语，用来修饰名词&#13;
&#13;
&gt; [!note]&#13;
&gt;&#13;
&gt; The book on the shelf（在书架上**的**） is great&#13;
&gt;&#13;
&gt; ****&#13;
&gt;&#13;
&gt; I hate the hot summers in Changsha（在长沙**的**）&#13;
&#13;
### 副词的属性&#13;
&#13;
副词属性的介词短语 用于 修饰 **动词、形容词、以及其他副词**&#13;
&#13;
&gt; [!note]&#13;
&gt;&#13;
&gt; 修饰动词：&#13;
&gt;&#13;
&gt; We went to a movie after dinner&#13;
&gt;&#13;
&gt; after dinner 修饰的是 went （在晚饭之后**去** ）&#13;
&gt;&#13;
&gt; ****&#13;
&gt;&#13;
&gt; They have classes at our local school&#13;
&gt;&#13;
&gt; at our local school 修饰的是 have （在我们当地的学校**有**）&#13;
&#13;
&gt; [!note]&#13;
&gt;&#13;
&gt; 修饰形容词：&#13;
&gt;&#13;
&gt; I am ready for dinner&#13;
&gt;&#13;
&gt; for dinner 修饰的是 ready （对晚餐**准备**）&#13;
&gt;&#13;
&gt; ****&#13;
&gt;&#13;
&gt; Sally is happy with her new teacher&#13;
&gt;&#13;
&gt; with her new teacher 修饰的是 happy （和她的新老师 **开心**）&#13;
&#13;
&gt; [!note]&#13;
&gt;&#13;
&gt; 修饰其他副词&#13;
&gt;&#13;
&gt; We got there late in the evening&#13;
&gt;&#13;
&gt; in the evening 修饰 late （晚上**迟到**）&#13;
&gt;&#13;
&gt; ****&#13;
&gt;&#13;
&gt; Our team scored early in the first quarter&#13;
&gt;&#13;
&gt; in the first quarter 修饰 early （在第一节 **得分**）&#13;
&#13;
&gt; [!important]&#13;
&gt;&#13;
&gt; 其实主要是去分析 这个介词短语修饰的什么成分&#13;
&#13;
但是 ：&#13;
&#13;
以上可以解决 百分之九十九的 情况&#13;
&#13;
但是存在一种情况是&#13;
&#13;
&gt; she comes from a far&#13;
&gt;&#13;
&gt; 她从远方来&#13;
&#13;
这个就是 介词 加上 一个 副词 &#13;
&#13;
![image-20240508180305782](https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240508180305782.png)&#13;
&#13;
备注：granted 授予   &#13;
&#13;
上面提到的这些都是介词成分&#13;
&#13;
## 主谓宾定状补&#13;
&#13;
其中尤其是**状语**和**补语**&#13;
&#13;
### **主语：**&#13;
&#13;
&lt;img src='https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240509203455932.png' alt='image-20240509203455932' style='zoom:33%;' /&gt;&#13;
&#13;
&gt; [!important]&#13;
&gt;&#13;
&gt; 主语一定是 **&lt;u&gt;名词属性&lt;/u&gt;** 的关系&#13;
&#13;
### **谓语：**&#13;
&#13;
&lt;img src='https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240509203708571.png' alt='image-20240509203708571' style='zoom:33%;' /&gt;&#13;
&#13;
### 宾语：&#13;
&#13;
&lt;img src='https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240509203757557.png' alt='image-20240509203757557' style='zoom:33%;' /&gt;&#13;
&#13;
&gt;[!important]&#13;
&gt;&#13;
&gt;宾语也是属于 **名词性** 成分&#13;
&#13;
### 定语：&#13;
&#13;
&lt;img src='https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240509204132565.png' alt='image-20240509204132565' style='zoom:33%;' /&gt;&#13;
&#13;
&gt; [!important]&#13;
&gt;&#13;
&gt; 定语 是 修饰 **名词性成分** 的成分&#13;
&gt;&#13;
&gt; 所以，定语可以立即为是 **形容词性成分**&#13;
&#13;
### 状语：&#13;
&#13;
&lt;img src='https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240509204627531.png' alt='image-20240509204627531' style='zoom:33%;' /&gt;&#13;
&#13;
&gt; [!important]&#13;
&gt;&#13;
&gt; 状语是用来修饰动词、形容词、其他副词的成分&#13;
&gt;&#13;
&gt; 所以状语是 **副词性质** 的东西&#13;
&#13;
时间性质的名词都是具有 副词属性的&#13;
&#13;
### 补语：&#13;
&#13;
&lt;img src='https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240509205213730.png' alt='image-20240509205213730' style='zoom:33%;' /&gt;&#13;
&#13;
&gt; [!important]&#13;
&gt;&#13;
&gt; 补语是做 补充说明 用的&#13;
&gt;&#13;
&gt; 可以是 形容词性成分 也可以是 名词性成分&#13;
&#13;
&gt; I found the movie to be very interesting&#13;
&#13;
&lt;img src='https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240509205845726.png' alt='image-20240509205845726' style='zoom:33%;' /&gt;&#13;
&#13;
&gt; [!note]&#13;
&gt;&#13;
&gt; 补语 包含 宾语补语 or 主语补语&#13;
&#13;
&gt; 可以把 be 动词替换为 等号(=)&#13;
&#13;
不管是 宾补 还是 主补&#13;
&#13;
**补语跟主语或者是宾语会形成 A is B 的关系**&#13;
&#13;
**或者说 形成系表结构**&#13;
&#13;
 可以通过 A is B 来验证这句话是不是补语&#13;
&#13;
比较难以理解的其实是主语补语。</description><guid isPermaLink="true">https://OnHaiping.github.io/blogs/post/ying-yu-yu-fa-%28Larry%29.html</guid><pubDate>Sun, 08 Sep 2024 08:57:00 +0000</pubDate></item><item><title>初始I2C</title><link>https://OnHaiping.github.io/blogs/post/chu-shi-I2C.html</link><description>## 初识I2C&#13;
&#13;
&lt;img src='https://picture-typora.obs.cn-north-4.myhuaweicloud.com/images/image-20240717090806935.png' alt='image-20240717090806935' style='zoom:30%;' /&gt;&#13;
&#13;
**SCL**是时钟线，**SDA**是数据线。</description><guid isPermaLink="true">https://OnHaiping.github.io/blogs/post/chu-shi-I2C.html</guid><pubDate>Wed, 17 Jul 2024 07:44:45 +0000</pubDate></item><item><title>初识three.js</title><link>https://OnHaiping.github.io/blogs/post/chu-shi-three.js.html</link><description># Three.js&#13;
&#13;
心血来潮，打算学three.js&#13;
&#13;
相比较于看视频学习来说，通过看文档的方式来的会更直接一些&#13;
&#13;
## 初步安装&#13;
&#13;
使用npm的方式来安装似乎会快点&#13;
&#13;
1. 去安装[Node.js](https://nodejs.org/)&#13;
&#13;
   详细教程我在这里就不放了，教程有很多。</description><guid isPermaLink="true">https://OnHaiping.github.io/blogs/post/chu-shi-three.js.html</guid><pubDate>Sun, 14 Jul 2024 10:51:28 +0000</pubDate></item><item><title>FastAPI学习</title><link>https://OnHaiping.github.io/blogs/post/FastAPI-xue-xi.html</link><description>## FastAPI介绍&#13;
FastAPI两部分组成：&#13;
&#13;
&gt;starlette负责web部分(Asyncio)&#13;
&gt;&#13;
&gt;​	包含ASGI框架，能够实现构建异步服务器&#13;
&gt;&#13;
&gt;Pydantic负责数据部分(类型提示)如下面代码所示:&#13;
&gt;&#13;
&gt;```python&#13;
&gt;from datetime import datetime&#13;
&gt;from typing import Tuple&#13;
&gt;&#13;
&gt;from pydantic import BaseModel&#13;
&gt;&#13;
&gt;&#13;
&gt;class Delivery(BaseModel):&#13;
&gt;    timestamp: datetime&#13;
&gt;    dimensions: Tuple[int, int]&#13;
&gt;&#13;
&gt;&#13;
&gt;m = Delivery(timestamp='2020-01-02T03:04:05Z', dimensions=['10', '20'])&#13;
&gt;print(repr(m.timestamp))&#13;
&gt;# &gt; datetime.datetime(2020, 1, 2, 3, 4, 5, tzinfo=TzInfo(UTC))&#13;
&gt;print(m.dimensions)&#13;
&gt;# &gt; (10, 20)&#13;
&gt;```&#13;
&gt;&#13;
&gt;可以更好的处理数据&#13;
## HTTP协议的结构详解&#13;
&#13;
![image-20240322173443809](https://s2.loli.net/2024/03/22/fqPBxiajpsIAwTd.png)&#13;
&#13;
并且使用的http协议发送Get和Post请求的时候，需要设置好数据格式&#13;
&#13;
```python&#13;
# web应用程序  : 遵循http协议&#13;
import socket&#13;
&#13;
sock = socket.socket()&#13;
&#13;
sock.bind(('127.0.0.1', 1010))&#13;
sock.listen(5)&#13;
&#13;
while 1:&#13;
    # 服务端要实现先收再发&#13;
    conn, addr = sock.accept()  # 阻塞等待客户端连接&#13;
    data = conn.recv(1024)&#13;
    print('客户端发送的请求信息\n', data)&#13;
    # 请求的时候不用管是因为浏览器已经帮我们已经封装好了&#13;
&#13;
    # 如果是这样的话，不符合http协议，服务端没有按照http协议的格式来发送数据给客户端&#13;
    # conn.send(b'hello,world!')&#13;
&#13;
    # 换成下面这样的带有响应头的数据，就符合http协议了&#13;
    conn.send(b'HTTP/1.1 200 OK\r\nhi\r\n\r\n&lt;h1&gt;hello,world!&lt;/h1&gt;')&#13;
    conn.close()&#13;
   &#13;
```&#13;
&#13;
一般会给直接设置好&#13;
&#13;
##  API接口&#13;
&#13;
分离代表的是 职责 分离&#13;
&#13;
### 前后端分离&#13;
&#13;
![image-20240322174043560](https://s2.loli.net/2024/03/22/8BiyszQ3eOktEph.png)&#13;
&#13;
### 前后端不分离(主流)&#13;
&#13;
![image-20240322174255437](https://s2.loli.net/2024/03/22/ghLRcox46yp9WO8.png)&#13;
&#13;
## RESTful开发规范&#13;
&#13;
RESTful是一种专门为了Web开发而定义的API接口的设计风格，尤其适用于前后端分离的模式中。</description><guid isPermaLink="true">https://OnHaiping.github.io/blogs/post/FastAPI-xue-xi.html</guid><pubDate>Sun, 14 Jul 2024 08:35:25 +0000</pubDate></item></channel></rss>